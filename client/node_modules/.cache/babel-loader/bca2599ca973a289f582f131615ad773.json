{"ast":null,"code":"var _jsxFileName = \"/home/muudi/Documents/DEVELOPMENT/Manchester Codes/FinalProject/plantiful/client/src/components/search/Search.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useContext } from 'react';\nimport { DataContext } from '../../data/context/DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Search() {\n  _s();\n\n  const {\n    dataSource\n  } = useContext(DataContext);\n  console.log(dataSource);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: dataSource && dataSource.map(data => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\" description is: \", forecast.plantId, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this)\n    }, void 0, false))\n  }, void 0, false);\n}\n\n_s(Search, \"WDzlFejbFKaZaTe/aM4a0Yn2/xA=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/muudi/Documents/DEVELOPMENT/Manchester Codes/FinalProject/plantiful/client/src/components/search/Search.js"],"names":["React","useContext","DataContext","Search","dataSource","console","log","map","data","forecast","plantId"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAAQC,WAAR,QAA2B,gCAA3B;;;AACA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC7B,QAAM;AAACC,IAAAA;AAAD,MAAeH,UAAU,CAACC,WAAD,CAA/B;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,sBACI;AAAA,cACAA,UAAU,IAAIA,UAAU,CAACG,GAAX,CAAgBC,IAAD,iBAC3B;AAAA,6BAEE;AAAA,wCAAsBC,QAAQ,CAACC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF,qBADY;AADd,mBADJ;AAYH;;GAhBuBP,M;;KAAAA,M","sourcesContent":["import React from 'react'\nimport { useContext } from 'react'\nimport {DataContext } from '../../data/context/DataContext'\nexport default function Search() {\n    const {dataSource} = useContext(DataContext)\n\n    console.log(dataSource);\n    return (\n        <>\n       {dataSource && dataSource.map((data) => (\n          <>\n         \n            <h2> description is: {forecast.plantId} </h2>\n            \n          \n          </>\n        ))}\n      </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}